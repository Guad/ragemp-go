/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: rage.i

#define SWIGMODULE rage

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "rage.hpp"

using namespace rage;

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_rage_a350b1ffd789f23c(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_rage_a350b1ffd789f23c(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


uint8_t *_wrap_time_t_GetHour_rage_a350b1ffd789f23c(rage::time_t *_swig_go_0) {
  rage::time_t *arg1 = (rage::time_t *) 0 ;
  uint8_t result;
  uint8_t *_swig_go_result;
  
  arg1 = *(rage::time_t **)&_swig_go_0; 
  
  result = rage::time_t::GetHour(arg1);
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


uint8_t *_wrap_time_t_GetMinute_rage_a350b1ffd789f23c(rage::time_t *_swig_go_0) {
  rage::time_t *arg1 = (rage::time_t *) 0 ;
  uint8_t result;
  uint8_t *_swig_go_result;
  
  arg1 = *(rage::time_t **)&_swig_go_0; 
  
  result = rage::time_t::GetMinute(arg1);
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


uint8_t *_wrap_time_t_GetSecond_rage_a350b1ffd789f23c(rage::time_t *_swig_go_0) {
  rage::time_t *arg1 = (rage::time_t *) 0 ;
  uint8_t result;
  uint8_t *_swig_go_result;
  
  arg1 = *(rage::time_t **)&_swig_go_0; 
  
  result = rage::time_t::GetSecond(arg1);
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


rage::time_t *_wrap_new_time_t_rage_a350b1ffd789f23c() {
  rage::time_t *result = 0 ;
  rage::time_t *_swig_go_result;
  
  
  result = (rage::time_t *)new rage::time_t();
  *(rage::time_t **)&_swig_go_result = (rage::time_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_time_t_rage_a350b1ffd789f23c(rage::time_t *_swig_go_0) {
  rage::time_t *arg1 = (rage::time_t *) 0 ;
  
  arg1 = *(rage::time_t **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_IPlugin_sdkver_IPlugin_rage_a350b1ffd789f23c() {
  int result;
  intgo _swig_go_result;
  
  
  result = rage::IPlugin::sdkver;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


uint32_t *_wrap_IPlugin_GetVersion_rage_a350b1ffd789f23c(rage::IPlugin *_swig_go_0) {
  rage::IPlugin *arg1 = (rage::IPlugin *) 0 ;
  uint32_t result;
  uint32_t *_swig_go_result;
  
  arg1 = *(rage::IPlugin **)&_swig_go_0; 
  
  result = (arg1)->GetVersion();
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


void _wrap_IPlugin_Unload_rage_a350b1ffd789f23c(rage::IPlugin *_swig_go_0) {
  rage::IPlugin *arg1 = (rage::IPlugin *) 0 ;
  
  arg1 = *(rage::IPlugin **)&_swig_go_0; 
  
  (arg1)->Unload();
  
}


rage::IPlugin *_wrap_new_IPlugin_rage_a350b1ffd789f23c() {
  rage::IPlugin *result = 0 ;
  rage::IPlugin *_swig_go_result;
  
  
  result = (rage::IPlugin *)new rage::IPlugin();
  *(rage::IPlugin **)&_swig_go_result = (rage::IPlugin *)result; 
  return _swig_go_result;
}


void _wrap_delete_IPlugin_rage_a350b1ffd789f23c(rage::IPlugin *_swig_go_0) {
  rage::IPlugin *arg1 = (rage::IPlugin *) 0 ;
  
  arg1 = *(rage::IPlugin **)&_swig_go_0; 
  
  delete arg1;
  
}


rage::IEntityHandler *_wrap_IEventHandler_GetEntityHandler_rage_a350b1ffd789f23c(rage::IEventHandler *_swig_go_0) {
  rage::IEventHandler *arg1 = (rage::IEventHandler *) 0 ;
  rage::IEntityHandler *result = 0 ;
  rage::IEntityHandler *_swig_go_result;
  
  arg1 = *(rage::IEventHandler **)&_swig_go_0; 
  
  result = (rage::IEntityHandler *)(arg1)->GetEntityHandler();
  *(rage::IEntityHandler **)&_swig_go_result = (rage::IEntityHandler *)result; 
  return _swig_go_result;
}


rage::IPlayerHandler *_wrap_IEventHandler_GetPlayerHandler_rage_a350b1ffd789f23c(rage::IEventHandler *_swig_go_0) {
  rage::IEventHandler *arg1 = (rage::IEventHandler *) 0 ;
  rage::IPlayerHandler *result = 0 ;
  rage::IPlayerHandler *_swig_go_result;
  
  arg1 = *(rage::IEventHandler **)&_swig_go_0; 
  
  result = (rage::IPlayerHandler *)(arg1)->GetPlayerHandler();
  *(rage::IPlayerHandler **)&_swig_go_result = (rage::IPlayerHandler *)result; 
  return _swig_go_result;
}


rage::IVehicleHandler *_wrap_IEventHandler_GetVehicleHandler_rage_a350b1ffd789f23c(rage::IEventHandler *_swig_go_0) {
  rage::IEventHandler *arg1 = (rage::IEventHandler *) 0 ;
  rage::IVehicleHandler *result = 0 ;
  rage::IVehicleHandler *_swig_go_result;
  
  arg1 = *(rage::IEventHandler **)&_swig_go_0; 
  
  result = (rage::IVehicleHandler *)(arg1)->GetVehicleHandler();
  *(rage::IVehicleHandler **)&_swig_go_result = (rage::IVehicleHandler *)result; 
  return _swig_go_result;
}


rage::IColshapeHandler *_wrap_IEventHandler_GetColshapeHandler_rage_a350b1ffd789f23c(rage::IEventHandler *_swig_go_0) {
  rage::IEventHandler *arg1 = (rage::IEventHandler *) 0 ;
  rage::IColshapeHandler *result = 0 ;
  rage::IColshapeHandler *_swig_go_result;
  
  arg1 = *(rage::IEventHandler **)&_swig_go_0; 
  
  result = (rage::IColshapeHandler *)(arg1)->GetColshapeHandler();
  *(rage::IColshapeHandler **)&_swig_go_result = (rage::IColshapeHandler *)result; 
  return _swig_go_result;
}


rage::ICheckpointHandler *_wrap_IEventHandler_GetCheckpointHandler_rage_a350b1ffd789f23c(rage::IEventHandler *_swig_go_0) {
  rage::IEventHandler *arg1 = (rage::IEventHandler *) 0 ;
  rage::ICheckpointHandler *result = 0 ;
  rage::ICheckpointHandler *_swig_go_result;
  
  arg1 = *(rage::IEventHandler **)&_swig_go_0; 
  
  result = (rage::ICheckpointHandler *)(arg1)->GetCheckpointHandler();
  *(rage::ICheckpointHandler **)&_swig_go_result = (rage::ICheckpointHandler *)result; 
  return _swig_go_result;
}


rage::IBlipHandler *_wrap_IEventHandler_GetBlipHandler_rage_a350b1ffd789f23c(rage::IEventHandler *_swig_go_0) {
  rage::IEventHandler *arg1 = (rage::IEventHandler *) 0 ;
  rage::IBlipHandler *result = 0 ;
  rage::IBlipHandler *_swig_go_result;
  
  arg1 = *(rage::IEventHandler **)&_swig_go_0; 
  
  result = (rage::IBlipHandler *)(arg1)->GetBlipHandler();
  *(rage::IBlipHandler **)&_swig_go_result = (rage::IBlipHandler *)result; 
  return _swig_go_result;
}


rage::IStreamerHandler *_wrap_IEventHandler_GetStreamerHandler_rage_a350b1ffd789f23c(rage::IEventHandler *_swig_go_0) {
  rage::IEventHandler *arg1 = (rage::IEventHandler *) 0 ;
  rage::IStreamerHandler *result = 0 ;
  rage::IStreamerHandler *_swig_go_result;
  
  arg1 = *(rage::IEventHandler **)&_swig_go_0; 
  
  result = (rage::IStreamerHandler *)(arg1)->GetStreamerHandler();
  *(rage::IStreamerHandler **)&_swig_go_result = (rage::IStreamerHandler *)result; 
  return _swig_go_result;
}


rage::ITickHandler *_wrap_IEventHandler_GetTickHandler_rage_a350b1ffd789f23c(rage::IEventHandler *_swig_go_0) {
  rage::IEventHandler *arg1 = (rage::IEventHandler *) 0 ;
  rage::ITickHandler *result = 0 ;
  rage::ITickHandler *_swig_go_result;
  
  arg1 = *(rage::IEventHandler **)&_swig_go_0; 
  
  result = (rage::ITickHandler *)(arg1)->GetTickHandler();
  *(rage::ITickHandler **)&_swig_go_result = (rage::ITickHandler *)result; 
  return _swig_go_result;
}


rage::IEventHandler *_wrap_new_IEventHandler_rage_a350b1ffd789f23c() {
  rage::IEventHandler *result = 0 ;
  rage::IEventHandler *_swig_go_result;
  
  
  result = (rage::IEventHandler *)new rage::IEventHandler();
  *(rage::IEventHandler **)&_swig_go_result = (rage::IEventHandler *)result; 
  return _swig_go_result;
}


void _wrap_delete_IEventHandler_rage_a350b1ffd789f23c(rage::IEventHandler *_swig_go_0) {
  rage::IEventHandler *arg1 = (rage::IEventHandler *) 0 ;
  
  arg1 = *(rage::IEventHandler **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_IEntityHandler_OnEntityCreated_rage_a350b1ffd789f23c(rage::IEntityHandler *_swig_go_0, IEntity *_swig_go_1) {
  rage::IEntityHandler *arg1 = (rage::IEntityHandler *) 0 ;
  IEntity *arg2 = (IEntity *) 0 ;
  
  arg1 = *(rage::IEntityHandler **)&_swig_go_0; 
  arg2 = *(IEntity **)&_swig_go_1; 
  
  (arg1)->OnEntityCreated(arg2);
  
}


void _wrap_IEntityHandler_OnEntityDestroyed_rage_a350b1ffd789f23c(rage::IEntityHandler *_swig_go_0, IEntity *_swig_go_1) {
  rage::IEntityHandler *arg1 = (rage::IEntityHandler *) 0 ;
  IEntity *arg2 = (IEntity *) 0 ;
  
  arg1 = *(rage::IEntityHandler **)&_swig_go_0; 
  arg2 = *(IEntity **)&_swig_go_1; 
  
  (arg1)->OnEntityDestroyed(arg2);
  
}


void _wrap_IEntityHandler_OnEntityModelChange_rage_a350b1ffd789f23c(rage::IEntityHandler *_swig_go_0, IEntity *_swig_go_1, hash_t *_swig_go_2) {
  rage::IEntityHandler *arg1 = (rage::IEntityHandler *) 0 ;
  IEntity *arg2 = (IEntity *) 0 ;
  hash_t arg3 ;
  hash_t *argp3 ;
  
  arg1 = *(rage::IEntityHandler **)&_swig_go_0; 
  arg2 = *(IEntity **)&_swig_go_1; 
  
  argp3 = (hash_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null hash_t");
  }
  arg3 = (hash_t)*argp3;
  
  
  (arg1)->OnEntityModelChange(arg2,arg3);
  
}


rage::IEntityHandler *_wrap_new_IEntityHandler_rage_a350b1ffd789f23c() {
  rage::IEntityHandler *result = 0 ;
  rage::IEntityHandler *_swig_go_result;
  
  
  result = (rage::IEntityHandler *)new rage::IEntityHandler();
  *(rage::IEntityHandler **)&_swig_go_result = (rage::IEntityHandler *)result; 
  return _swig_go_result;
}


void _wrap_delete_IEntityHandler_rage_a350b1ffd789f23c(rage::IEntityHandler *_swig_go_0) {
  rage::IEntityHandler *arg1 = (rage::IEntityHandler *) 0 ;
  
  arg1 = *(rage::IEntityHandler **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_exit_t_disconnect_rage_a350b1ffd789f23c() {
  rage::exit_t result;
  intgo _swig_go_result;
  
  
  result = rage::exit_t::disconnect;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_exit_t_timeout_rage_a350b1ffd789f23c() {
  rage::exit_t result;
  intgo _swig_go_result;
  
  
  result = rage::exit_t::timeout;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_exit_t_kicked_rage_a350b1ffd789f23c() {
  rage::exit_t result;
  intgo _swig_go_result;
  
  
  result = rage::exit_t::kicked;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_IPlayerHandler_OnPlayerJoin_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  
  (arg1)->OnPlayerJoin(arg2);
  
}


void _wrap_IPlayerHandler_OnPlayerReady_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  
  (arg1)->OnPlayerReady(arg2);
  
}


void _wrap_IPlayerHandler_OnPlayerQuit_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  rage::exit_t arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = (rage::exit_t)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  (arg1)->OnPlayerQuit(arg2,arg3,(char const *)arg4);
  
  free(arg4); 
}


void _wrap_IPlayerHandler_OnPlayerCommand_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, std::u16string *_swig_go_2) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  std::u16string *arg3 = 0 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(std::u16string **)&_swig_go_2; 
  
  (arg1)->OnPlayerCommand(arg2,(std::u16string const &)*arg3);
  
}


void _wrap_IPlayerHandler_OnPlayerChat_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, std::u16string *_swig_go_2) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  std::u16string *arg3 = 0 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(std::u16string **)&_swig_go_2; 
  
  (arg1)->OnPlayerChat(arg2,(std::u16string const &)*arg3);
  
}


void _wrap_IPlayerHandler_OnPlayerDeath_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, hash_t *_swig_go_2, IPlayer *_swig_go_3) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  hash_t arg3 ;
  IPlayer *arg4 = (IPlayer *) 0 ;
  hash_t *argp3 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  
  argp3 = (hash_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null hash_t");
  }
  arg3 = (hash_t)*argp3;
  
  arg4 = *(IPlayer **)&_swig_go_3; 
  
  (arg1)->OnPlayerDeath(arg2,arg3,arg4);
  
}


void _wrap_IPlayerHandler_OnPlayerSpawn_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  
  (arg1)->OnPlayerSpawn(arg2);
  
}


void _wrap_IPlayerHandler_OnPlayerDamage_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  
  (arg1)->OnPlayerDamage(arg2,arg3,arg4);
  
}


void _wrap_IPlayerHandler_OnPlayerWeaponChange_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, hash_t *_swig_go_2, hash_t *_swig_go_3) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  hash_t arg3 ;
  hash_t arg4 ;
  hash_t *argp3 ;
  hash_t *argp4 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  
  argp3 = (hash_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null hash_t");
  }
  arg3 = (hash_t)*argp3;
  
  
  argp4 = (hash_t *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null hash_t");
  }
  arg4 = (hash_t)*argp4;
  
  
  (arg1)->OnPlayerWeaponChange(arg2,arg3,arg4);
  
}


void _wrap_IPlayerHandler_OnPlayerRemoteEvent_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, uint64_t *_swig_go_2, args_t *_swig_go_3) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  uint64_t arg3 ;
  args_t *arg4 = 0 ;
  uint64_t *argp3 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  
  argp3 = (uint64_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null uint64_t");
  }
  arg3 = (uint64_t)*argp3;
  
  arg4 = *(args_t **)&_swig_go_3; 
  
  (arg1)->OnPlayerRemoteEvent(arg2,arg3,(args_t const &)*arg4);
  
}


void _wrap_IPlayerHandler_OnPlayerStartEnterVehicle_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, IVehicle *_swig_go_2, uint8_t *_swig_go_3) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  IVehicle *arg3 = (IVehicle *) 0 ;
  uint8_t arg4 ;
  uint8_t *argp4 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(IVehicle **)&_swig_go_2; 
  
  argp4 = (uint8_t *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null uint8_t");
  }
  arg4 = (uint8_t)*argp4;
  
  
  (arg1)->OnPlayerStartEnterVehicle(arg2,arg3,arg4);
  
}


void _wrap_IPlayerHandler_OnPlayerEnterVehicle_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, IVehicle *_swig_go_2, uint8_t *_swig_go_3) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  IVehicle *arg3 = (IVehicle *) 0 ;
  uint8_t arg4 ;
  uint8_t *argp4 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(IVehicle **)&_swig_go_2; 
  
  argp4 = (uint8_t *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null uint8_t");
  }
  arg4 = (uint8_t)*argp4;
  
  
  (arg1)->OnPlayerEnterVehicle(arg2,arg3,arg4);
  
}


void _wrap_IPlayerHandler_OnPlayerStartExitVehicle_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, IVehicle *_swig_go_2) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  IVehicle *arg3 = (IVehicle *) 0 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(IVehicle **)&_swig_go_2; 
  
  (arg1)->OnPlayerStartExitVehicle(arg2,arg3);
  
}


void _wrap_IPlayerHandler_OnPlayerExitVehicle_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0, IPlayer *_swig_go_1, IVehicle *_swig_go_2) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  IVehicle *arg3 = (IVehicle *) 0 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(IVehicle **)&_swig_go_2; 
  
  (arg1)->OnPlayerExitVehicle(arg2,arg3);
  
}


rage::IPlayerHandler *_wrap_new_IPlayerHandler_rage_a350b1ffd789f23c() {
  rage::IPlayerHandler *result = 0 ;
  rage::IPlayerHandler *_swig_go_result;
  
  
  result = (rage::IPlayerHandler *)new rage::IPlayerHandler();
  *(rage::IPlayerHandler **)&_swig_go_result = (rage::IPlayerHandler *)result; 
  return _swig_go_result;
}


void _wrap_delete_IPlayerHandler_rage_a350b1ffd789f23c(rage::IPlayerHandler *_swig_go_0) {
  rage::IPlayerHandler *arg1 = (rage::IPlayerHandler *) 0 ;
  
  arg1 = *(rage::IPlayerHandler **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_IVehicleHandler_OnVehicleDeath_rage_a350b1ffd789f23c(rage::IVehicleHandler *_swig_go_0, IVehicle *_swig_go_1, hash_t *_swig_go_2, IPlayer *_swig_go_3) {
  rage::IVehicleHandler *arg1 = (rage::IVehicleHandler *) 0 ;
  IVehicle *arg2 = (IVehicle *) 0 ;
  hash_t arg3 ;
  IPlayer *arg4 = (IPlayer *) 0 ;
  hash_t *argp3 ;
  
  arg1 = *(rage::IVehicleHandler **)&_swig_go_0; 
  arg2 = *(IVehicle **)&_swig_go_1; 
  
  argp3 = (hash_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null hash_t");
  }
  arg3 = (hash_t)*argp3;
  
  arg4 = *(IPlayer **)&_swig_go_3; 
  
  (arg1)->OnVehicleDeath(arg2,arg3,arg4);
  
}


void _wrap_IVehicleHandler_OnVehicleSirenToggle_rage_a350b1ffd789f23c(rage::IVehicleHandler *_swig_go_0, IVehicle *_swig_go_1, bool _swig_go_2) {
  rage::IVehicleHandler *arg1 = (rage::IVehicleHandler *) 0 ;
  IVehicle *arg2 = (IVehicle *) 0 ;
  bool arg3 ;
  
  arg1 = *(rage::IVehicleHandler **)&_swig_go_0; 
  arg2 = *(IVehicle **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  (arg1)->OnVehicleSirenToggle(arg2,arg3);
  
}


void _wrap_IVehicleHandler_OnVehicleHornToggle_rage_a350b1ffd789f23c(rage::IVehicleHandler *_swig_go_0, IVehicle *_swig_go_1, bool _swig_go_2) {
  rage::IVehicleHandler *arg1 = (rage::IVehicleHandler *) 0 ;
  IVehicle *arg2 = (IVehicle *) 0 ;
  bool arg3 ;
  
  arg1 = *(rage::IVehicleHandler **)&_swig_go_0; 
  arg2 = *(IVehicle **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  (arg1)->OnVehicleHornToggle(arg2,arg3);
  
}


void _wrap_IVehicleHandler_OnTrailerAttached_rage_a350b1ffd789f23c(rage::IVehicleHandler *_swig_go_0, IVehicle *_swig_go_1, IVehicle *_swig_go_2) {
  rage::IVehicleHandler *arg1 = (rage::IVehicleHandler *) 0 ;
  IVehicle *arg2 = (IVehicle *) 0 ;
  IVehicle *arg3 = (IVehicle *) 0 ;
  
  arg1 = *(rage::IVehicleHandler **)&_swig_go_0; 
  arg2 = *(IVehicle **)&_swig_go_1; 
  arg3 = *(IVehicle **)&_swig_go_2; 
  
  (arg1)->OnTrailerAttached(arg2,arg3);
  
}


void _wrap_IVehicleHandler_OnVehicleDamage_rage_a350b1ffd789f23c(rage::IVehicleHandler *_swig_go_0, IVehicle *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  rage::IVehicleHandler *arg1 = (rage::IVehicleHandler *) 0 ;
  IVehicle *arg2 = (IVehicle *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = *(rage::IVehicleHandler **)&_swig_go_0; 
  arg2 = *(IVehicle **)&_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  
  (arg1)->OnVehicleDamage(arg2,arg3,arg4);
  
}


rage::IVehicleHandler *_wrap_new_IVehicleHandler_rage_a350b1ffd789f23c() {
  rage::IVehicleHandler *result = 0 ;
  rage::IVehicleHandler *_swig_go_result;
  
  
  result = (rage::IVehicleHandler *)new rage::IVehicleHandler();
  *(rage::IVehicleHandler **)&_swig_go_result = (rage::IVehicleHandler *)result; 
  return _swig_go_result;
}


void _wrap_delete_IVehicleHandler_rage_a350b1ffd789f23c(rage::IVehicleHandler *_swig_go_0) {
  rage::IVehicleHandler *arg1 = (rage::IVehicleHandler *) 0 ;
  
  arg1 = *(rage::IVehicleHandler **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_IColshapeHandler_OnPlayerEnterColshape_rage_a350b1ffd789f23c(rage::IColshapeHandler *_swig_go_0, IPlayer *_swig_go_1, IColshape *_swig_go_2) {
  rage::IColshapeHandler *arg1 = (rage::IColshapeHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  IColshape *arg3 = (IColshape *) 0 ;
  
  arg1 = *(rage::IColshapeHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(IColshape **)&_swig_go_2; 
  
  (arg1)->OnPlayerEnterColshape(arg2,arg3);
  
}


void _wrap_IColshapeHandler_OnPlayerExitColshape_rage_a350b1ffd789f23c(rage::IColshapeHandler *_swig_go_0, IPlayer *_swig_go_1, IColshape *_swig_go_2) {
  rage::IColshapeHandler *arg1 = (rage::IColshapeHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  IColshape *arg3 = (IColshape *) 0 ;
  
  arg1 = *(rage::IColshapeHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(IColshape **)&_swig_go_2; 
  
  (arg1)->OnPlayerExitColshape(arg2,arg3);
  
}


rage::IColshapeHandler *_wrap_new_IColshapeHandler_rage_a350b1ffd789f23c() {
  rage::IColshapeHandler *result = 0 ;
  rage::IColshapeHandler *_swig_go_result;
  
  
  result = (rage::IColshapeHandler *)new rage::IColshapeHandler();
  *(rage::IColshapeHandler **)&_swig_go_result = (rage::IColshapeHandler *)result; 
  return _swig_go_result;
}


void _wrap_delete_IColshapeHandler_rage_a350b1ffd789f23c(rage::IColshapeHandler *_swig_go_0) {
  rage::IColshapeHandler *arg1 = (rage::IColshapeHandler *) 0 ;
  
  arg1 = *(rage::IColshapeHandler **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ICheckpointHandler_OnPlayerEnterCheckpoint_rage_a350b1ffd789f23c(rage::ICheckpointHandler *_swig_go_0, IPlayer *_swig_go_1, ICheckpoint *_swig_go_2) {
  rage::ICheckpointHandler *arg1 = (rage::ICheckpointHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  ICheckpoint *arg3 = (ICheckpoint *) 0 ;
  
  arg1 = *(rage::ICheckpointHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(ICheckpoint **)&_swig_go_2; 
  
  (arg1)->OnPlayerEnterCheckpoint(arg2,arg3);
  
}


void _wrap_ICheckpointHandler_OnPlayerExitCheckpoint_rage_a350b1ffd789f23c(rage::ICheckpointHandler *_swig_go_0, IPlayer *_swig_go_1, ICheckpoint *_swig_go_2) {
  rage::ICheckpointHandler *arg1 = (rage::ICheckpointHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  ICheckpoint *arg3 = (ICheckpoint *) 0 ;
  
  arg1 = *(rage::ICheckpointHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(ICheckpoint **)&_swig_go_2; 
  
  (arg1)->OnPlayerExitCheckpoint(arg2,arg3);
  
}


rage::ICheckpointHandler *_wrap_new_ICheckpointHandler_rage_a350b1ffd789f23c() {
  rage::ICheckpointHandler *result = 0 ;
  rage::ICheckpointHandler *_swig_go_result;
  
  
  result = (rage::ICheckpointHandler *)new rage::ICheckpointHandler();
  *(rage::ICheckpointHandler **)&_swig_go_result = (rage::ICheckpointHandler *)result; 
  return _swig_go_result;
}


void _wrap_delete_ICheckpointHandler_rage_a350b1ffd789f23c(rage::ICheckpointHandler *_swig_go_0) {
  rage::ICheckpointHandler *arg1 = (rage::ICheckpointHandler *) 0 ;
  
  arg1 = *(rage::ICheckpointHandler **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_IBlipHandler_OnPlayerCreateWaypoint_rage_a350b1ffd789f23c(rage::IBlipHandler *_swig_go_0, rage::IPlayer *_swig_go_1, vector3 *_swig_go_2) {
  rage::IBlipHandler *arg1 = (rage::IBlipHandler *) 0 ;
  rage::IPlayer *arg2 = (rage::IPlayer *) 0 ;
  vector3 *arg3 = 0 ;
  
  arg1 = *(rage::IBlipHandler **)&_swig_go_0; 
  arg2 = *(rage::IPlayer **)&_swig_go_1; 
  arg3 = *(vector3 **)&_swig_go_2; 
  
  (arg1)->OnPlayerCreateWaypoint(arg2,(vector3 const &)*arg3);
  
}


void _wrap_IBlipHandler_OnPlayerReachWaypoint_rage_a350b1ffd789f23c(rage::IBlipHandler *_swig_go_0, rage::IPlayer *_swig_go_1) {
  rage::IBlipHandler *arg1 = (rage::IBlipHandler *) 0 ;
  rage::IPlayer *arg2 = (rage::IPlayer *) 0 ;
  
  arg1 = *(rage::IBlipHandler **)&_swig_go_0; 
  arg2 = *(rage::IPlayer **)&_swig_go_1; 
  
  (arg1)->OnPlayerReachWaypoint(arg2);
  
}


rage::IBlipHandler *_wrap_new_IBlipHandler_rage_a350b1ffd789f23c() {
  rage::IBlipHandler *result = 0 ;
  rage::IBlipHandler *_swig_go_result;
  
  
  result = (rage::IBlipHandler *)new rage::IBlipHandler();
  *(rage::IBlipHandler **)&_swig_go_result = (rage::IBlipHandler *)result; 
  return _swig_go_result;
}


void _wrap_delete_IBlipHandler_rage_a350b1ffd789f23c(rage::IBlipHandler *_swig_go_0) {
  rage::IBlipHandler *arg1 = (rage::IBlipHandler *) 0 ;
  
  arg1 = *(rage::IBlipHandler **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_IStreamerHandler_OnPlayerStreamIn_rage_a350b1ffd789f23c(rage::IStreamerHandler *_swig_go_0, IPlayer *_swig_go_1, IPlayer *_swig_go_2) {
  rage::IStreamerHandler *arg1 = (rage::IStreamerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  IPlayer *arg3 = (IPlayer *) 0 ;
  
  arg1 = *(rage::IStreamerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(IPlayer **)&_swig_go_2; 
  
  (arg1)->OnPlayerStreamIn(arg2,arg3);
  
}


void _wrap_IStreamerHandler_OnPlayerStreamOut_rage_a350b1ffd789f23c(rage::IStreamerHandler *_swig_go_0, IPlayer *_swig_go_1, IPlayer *_swig_go_2) {
  rage::IStreamerHandler *arg1 = (rage::IStreamerHandler *) 0 ;
  IPlayer *arg2 = (IPlayer *) 0 ;
  IPlayer *arg3 = (IPlayer *) 0 ;
  
  arg1 = *(rage::IStreamerHandler **)&_swig_go_0; 
  arg2 = *(IPlayer **)&_swig_go_1; 
  arg3 = *(IPlayer **)&_swig_go_2; 
  
  (arg1)->OnPlayerStreamOut(arg2,arg3);
  
}


rage::IStreamerHandler *_wrap_new_IStreamerHandler_rage_a350b1ffd789f23c() {
  rage::IStreamerHandler *result = 0 ;
  rage::IStreamerHandler *_swig_go_result;
  
  
  result = (rage::IStreamerHandler *)new rage::IStreamerHandler();
  *(rage::IStreamerHandler **)&_swig_go_result = (rage::IStreamerHandler *)result; 
  return _swig_go_result;
}


void _wrap_delete_IStreamerHandler_rage_a350b1ffd789f23c(rage::IStreamerHandler *_swig_go_0) {
  rage::IStreamerHandler *arg1 = (rage::IStreamerHandler *) 0 ;
  
  arg1 = *(rage::IStreamerHandler **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ITickHandler_Tick_rage_a350b1ffd789f23c(rage::ITickHandler *_swig_go_0) {
  rage::ITickHandler *arg1 = (rage::ITickHandler *) 0 ;
  
  arg1 = *(rage::ITickHandler **)&_swig_go_0; 
  
  (arg1)->Tick();
  
}


rage::ITickHandler *_wrap_new_ITickHandler_rage_a350b1ffd789f23c() {
  rage::ITickHandler *result = 0 ;
  rage::ITickHandler *_swig_go_result;
  
  
  result = (rage::ITickHandler *)new rage::ITickHandler();
  *(rage::ITickHandler **)&_swig_go_result = (rage::ITickHandler *)result; 
  return _swig_go_result;
}


void _wrap_delete_ITickHandler_rage_a350b1ffd789f23c(rage::ITickHandler *_swig_go_0) {
  rage::ITickHandler *arg1 = (rage::ITickHandler *) 0 ;
  
  arg1 = *(rage::ITickHandler **)&_swig_go_0; 
  
  delete arg1;
  
}


rage::time_t *_wrap_IWorld_GetTime_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  rage::time_t result;
  rage::time_t *_swig_go_result;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  
  result = (arg1)->GetTime();
  *(rage::time_t **)&_swig_go_result = new rage::time_t(result); 
  return _swig_go_result;
}


void _wrap_IWorld_SetTime_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0, rage::time_t *_swig_go_1) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  rage::time_t arg2 ;
  rage::time_t *argp2 ;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  
  argp2 = (rage::time_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null rage::time_t");
  }
  arg2 = (rage::time_t)*argp2;
  
  
  (arg1)->SetTime(arg2);
  
}


std::string *_wrap_IWorld_GetWeather_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  std::string *result = 0 ;
  std::string *_swig_go_result;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  
  result = (std::string *) &(arg1)->GetWeather();
  *(std::string **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IWorld_SetWeather_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0, std::string *_swig_go_1) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->SetWeather((std::string const &)*arg2);
  
}


void _wrap_IWorld_SetWeatherTransition__SWIG_0_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0, std::string *_swig_go_1, float _swig_go_2) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  (arg1)->SetWeatherTransition((std::string const &)*arg2,arg3);
  
}


void _wrap_IWorld_SetWeatherTransition__SWIG_1_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0, std::string *_swig_go_1) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->SetWeatherTransition((std::string const &)*arg2);
  
}


void _wrap_IWorld_RequestIpl_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0, std::string *_swig_go_1) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->RequestIpl((std::string const &)*arg2);
  
}


void _wrap_IWorld_RemoveIpl_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0, std::string *_swig_go_1) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->RemoveIpl((std::string const &)*arg2);
  
}


bool _wrap_IWorld_AreTrafficLightsLocked_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  
  result = (bool)(arg1)->AreTrafficLightsLocked();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IWorld_LockTrafficLights_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0, bool _swig_go_1) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  bool arg2 ;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->LockTrafficLights(arg2);
  
}


intgo _wrap_IWorld_GetTrafficLightsState_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  
  result = (int)(arg1)->GetTrafficLightsState();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IWorld_SetTrafficLightsState_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0, intgo _swig_go_1) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  int arg2 ;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  (arg1)->SetTrafficLightsState(arg2);
  
}


void _wrap_delete_IWorld_rage_a350b1ffd789f23c(rage::IWorld *_swig_go_0) {
  rage::IWorld *arg1 = (rage::IWorld *) 0 ;
  
  arg1 = *(rage::IWorld **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_IConfig_GetInt__SWIG_0_rage_a350b1ffd789f23c(rage::IConfig *_swig_go_0, std::string *_swig_go_1, intgo _swig_go_2) {
  rage::IConfig *arg1 = (rage::IConfig *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(rage::IConfig **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)(arg1)->GetInt((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_IConfig_GetInt__SWIG_1_rage_a350b1ffd789f23c(rage::IConfig *_swig_go_0, std::string *_swig_go_1) {
  rage::IConfig *arg1 = (rage::IConfig *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(rage::IConfig **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (int)(arg1)->GetInt((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::string *_wrap_IConfig_GetString__SWIG_0_rage_a350b1ffd789f23c(rage::IConfig *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2) {
  rage::IConfig *arg1 = (rage::IConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(rage::IConfig **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  
  result = (arg1)->GetString((std::string const &)*arg2,(std::string const &)*arg3);
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


std::string *_wrap_IConfig_GetString__SWIG_1_rage_a350b1ffd789f23c(rage::IConfig *_swig_go_0, std::string *_swig_go_1) {
  rage::IConfig *arg1 = (rage::IConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(rage::IConfig **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (arg1)->GetString((std::string const &)*arg2);
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


void _wrap_delete_IConfig_rage_a350b1ffd789f23c(rage::IConfig *_swig_go_0) {
  rage::IConfig *arg1 = (rage::IConfig *) 0 ;
  
  arg1 = *(rage::IConfig **)&_swig_go_0; 
  
  delete arg1;
  
}


rage::IMultiplayer *_wrap_IMultiplayer_FromPointer_rage_a350b1ffd789f23c(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  rage::IMultiplayer *result = 0 ;
  rage::IMultiplayer *_swig_go_result;
  
  arg1 = *(void **)&_swig_go_0; 
  
  result = (rage::IMultiplayer *) &rage::IMultiplayer::FromPointer(arg1);
  *(rage::IMultiplayer **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IMultiplayer_AddEventHandler_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0, rage::IEventHandler *_swig_go_1) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  rage::IEventHandler *arg2 = (rage::IEventHandler *) 0 ;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  arg2 = *(rage::IEventHandler **)&_swig_go_1; 
  
  (arg1)->AddEventHandler(arg2);
  
}


void _wrap_IMultiplayer_AddRemoteEventHandler_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0, std::string *_swig_go_1, std::function< void (IPlayer *,args_t const &) > *_swig_go_2) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  std::string *arg2 = 0 ;
  rage::removeEventHandler_t arg3 ;
  rage::removeEventHandler_t *argp3 ;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  argp3 = (rage::removeEventHandler_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null rage::removeEventHandler_t");
  }
  arg3 = (rage::removeEventHandler_t)*argp3;
  
  
  (arg1)->AddRemoteEventHandler((std::string const &)*arg2,arg3);
  
}


IPlayerPool *_wrap_IMultiplayer_GetPlayerPool_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  IPlayerPool *result = 0 ;
  IPlayerPool *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (IPlayerPool *) &(arg1)->GetPlayerPool();
  *(IPlayerPool **)&_swig_go_result = result; 
  return _swig_go_result;
}


IVehiclePool *_wrap_IMultiplayer_GetVehiclePool_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  IVehiclePool *result = 0 ;
  IVehiclePool *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (IVehiclePool *) &(arg1)->GetVehiclePool();
  *(IVehiclePool **)&_swig_go_result = result; 
  return _swig_go_result;
}


IColshapePool *_wrap_IMultiplayer_GetColshapePool_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  IColshapePool *result = 0 ;
  IColshapePool *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (IColshapePool *) &(arg1)->GetColshapePool();
  *(IColshapePool **)&_swig_go_result = result; 
  return _swig_go_result;
}


ICheckpointPool *_wrap_IMultiplayer_GetCheckpointPool_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  ICheckpointPool *result = 0 ;
  ICheckpointPool *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (ICheckpointPool *) &(arg1)->GetCheckpointPool();
  *(ICheckpointPool **)&_swig_go_result = result; 
  return _swig_go_result;
}


IMarkerPool *_wrap_IMultiplayer_GetMarkerPool_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  IMarkerPool *result = 0 ;
  IMarkerPool *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (IMarkerPool *) &(arg1)->GetMarkerPool();
  *(IMarkerPool **)&_swig_go_result = result; 
  return _swig_go_result;
}


IBlipPool *_wrap_IMultiplayer_GetBlipPool_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  IBlipPool *result = 0 ;
  IBlipPool *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (IBlipPool *) &(arg1)->GetBlipPool();
  *(IBlipPool **)&_swig_go_result = result; 
  return _swig_go_result;
}


IPickupPool *_wrap_IMultiplayer_GetPickupPool_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  IPickupPool *result = 0 ;
  IPickupPool *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (IPickupPool *) &(arg1)->GetPickupPool();
  *(IPickupPool **)&_swig_go_result = result; 
  return _swig_go_result;
}


IObjectPool *_wrap_IMultiplayer_GetObjectPool_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  IObjectPool *result = 0 ;
  IObjectPool *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (IObjectPool *) &(arg1)->GetObjectPool();
  *(IObjectPool **)&_swig_go_result = result; 
  return _swig_go_result;
}


ITextLabelPool *_wrap_IMultiplayer_GetLabelPool_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  ITextLabelPool *result = 0 ;
  ITextLabelPool *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (ITextLabelPool *) &(arg1)->GetLabelPool();
  *(ITextLabelPool **)&_swig_go_result = result; 
  return _swig_go_result;
}


rage::IWorld *_wrap_IMultiplayer_GetWorld_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  rage::IWorld *result = 0 ;
  rage::IWorld *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (rage::IWorld *) &(arg1)->GetWorld();
  *(rage::IWorld **)&_swig_go_result = result; 
  return _swig_go_result;
}


rage::IConfig *_wrap_IMultiplayer_GetConfig_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  rage::IConfig *result = 0 ;
  rage::IConfig *_swig_go_result;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  result = (rage::IConfig *) &(arg1)->GetConfig();
  *(rage::IConfig **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_IMultiplayer_rage_a350b1ffd789f23c(rage::IMultiplayer *_swig_go_0) {
  rage::IMultiplayer *arg1 = (rage::IMultiplayer *) 0 ;
  
  arg1 = *(rage::IMultiplayer **)&_swig_go_0; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

